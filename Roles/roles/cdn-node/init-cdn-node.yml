---
- hosts: all
  gather_facts: no
  vars:
    node_id: 0
    nginx_version: "1.16.0"
    transcoder: "no"
  become: yes
  become_user: root
  tasks:
    - name: Base configurations
      block:
        - selinux: state="disabled"
        - timezone: name="Asia/Ho_Chi_Minh"
        - pam_limits:
            domain: "*"
            limit_type: "-"
            limit_item: nofile
            value: "200000"
            use_max: yes
        - sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            reload: yes
          with_items:
            - { name: vm.vfs_cache_pressure, value: 50 }
            - { name: net.core.somaxconn, value: 65535 }
            - { name: net.ipv4.tcp_max_tw_buckets, value: 1440000 }
            - { name: net.ipv4.ip_local_port_range, value: "1024 65000" }
            - { name: net.ipv4.tcp_fin_timeout, value: 15 }
            - { name: net.ipv4.tcp_window_scaling, value: 1 }
            - { name: net.ipv4.tcp_max_syn_backlog, value: 3240000 }
            - { name: net.ipv4.tcp_slow_start_after_idle, value: 0 }
            - { name: vm.swappiness, value: 10 }
          when: transcoder == "no"
        - sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            reload: yes
          with_items:
            - { name: vm.vfs_cache_pressure, value: 50 }
            - { name: net.core.somaxconn, value: 65535 }
            - { name: net.ipv4.tcp_max_tw_buckets, value: 2000000 }
            - { name: net.ipv4.ip_local_port_range, value: "1024 65000" }
            - { name: net.ipv4.tcp_fin_timeout, value: 10 }
            - { name: net.ipv4.tcp_window_scaling, value: 1 }
            - { name: net.ipv4.tcp_max_syn_backlog, value: 3240000 }
            - { name: net.ipv4.tcp_slow_start_after_idle, value: 0 }
            - { name: net.ipv4.ip_forward, value: 1 }
            - { name: net.ipv4.tcp_timestamps, value: 1 }
            - { name: net.ipv4.tcp_keepalive_intvl, value: 15 }
            - { name: net.ipv4.tcp_keepalive_probes, value: 5 }
            - { name: net.ipv4.conf.all.rp_filter, value: 0 }
            - { name: net.ipv4.conf.all.accept_local, value: 1 }
            - { name: net.nf_conntrack_max, value: 2000000 }
            - { name: net.netfilter.nf_conntrack_max, value: 20000000 }
            - { name: net.netfilter.nf_conntrack_tcp_loose, value: 0 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_established, value: 300 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_close, value: 10 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_close_wait, value: 10 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_fin_wait, value: 20 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_last_ack, value: 20 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_syn_recv, value: 20 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_syn_sent, value: 20 }
            - { name: net.netfilter.nf_conntrack_tcp_timeout_time_wait, value: 10 }
            - { name: net.netfilter.nf_conntrack_generic_timeout, value: 300 }
          when: transcoder == "yes"

    - name: Add required repositories & GPG keys
      block:
      - yum: state=present name=epel-release
      - yum_repository:
          state: present
          enabled: yes
          name: "{{ item.name }}"
          description: "{{ item.name }}"
          baseurl: "{{ item.url }}"
          gpgcheck: yes
          gpgkey: "{{ item.key }}"
        with_items:
          - { name: OpenResty, url: "https://openresty.org/package/centos/$releasever/$basearch", key: "https://openresty.org/package/pubkey.gpg" }
          - { name: Elastic-7.x, url: "https://artifacts.elastic.co/packages/7.x/yum", key: "https://artifacts.elastic.co/GPG-KEY-elasticsearch" }
        
    - name: Base packages and dependencies
      yum: 
        state: present
        name: [wget, filebeat, libaio, pcre, pcre-devel, openssl, openssl-devel, zlib, perl-ExtUtils-Embed, perl, automake, gcc, yum-utils, libmaxminddb-devel, net-snmp, git, atop, gd, gd-devel, openresty, rsync, collectd,  collectd-nginx]

    - name: Install ffmpeg for transcoding
      block: 
        - unarchive: 
            src: https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
            dest: /usr/share/
            remote_src: yes
        - shell: "cd /usr/share && cp -rf ffmpeg-* ffmpeg && rm -rf ffmpeg-* && ln -sf /usr/share/ffmpeg/ffmpeg /usr/bin/ffmpeg"
      when: transcoder == "yes"

    - name: Add nginx user
      block: 
        - user: 
            name: nginx
            shell: /bin/bash
            password: "$6$123456a@$i5eAc/6RpuhkOk2nHRWKjE8.uiLMbbRBBzJe.ttsX22WC6U3lPEk49jXDXUwWAqSTerD9EE.mAtAOuYLdWpOV0"
        - lineinfile:
            dest: /etc/sudoers
            line: "{{ item }}"
            state: present
            insertafter: EOF
          with_items:
            - "nginx  ALL=(ALL:ALL) NOPASSWD: /usr/sbin/service nginx *"
            - "nginx  ALL=(ALL:ALL) NOPASSWD: /usr/bin/nginx *"
        - authorized_key:
            user: nginx
            state: present
            key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuGsva+8q/+GPZ/Xg8Xpm2FslXdHYzQxmy6BKDM+YP7u5+sSPjinB2Ts2/4NpOQlKqFj0hDhTMI4lm8yui5oCodtB8xc8ygaYnjvxnlTzCauzx9VgdTJktnRZ0r8jCay3i7p5sGxLmSMQEPbplL7G4MlIyeYaq6MyH4Qe3M8CGYMAZm2Oic4YgYYNDzvj4zW5Cn4Z1nCtnXZNXon9cpHBg4AVu1zazX3Umkn6ViABFNvx1mMcGgJDv6v3F/sQhfEbYvoRajIVkauKVccxVWT/MGt16ou4WsXWaFyYTZw+I5bNoj9ArK0kz5gFy7hWgCCqUuw5d93/7JiW9zns5uQ8v nginx@cdn-master"

    - name: Clone Nginx modules source code
      git: 
        repo: "{{ item.url }}"
        dest: "/usr/src/{{ item.name }}"
      with_items: 
        - { name: ngx_cache_purge, url: "https://github.com/nginx-modules/ngx_cache_purge.git" }
        - { name: nginx-rtmp-module, url: "https://github.com/arut/nginx-rtmp-module.git" }
        - { name: ngx_devel_kit, url: "https://github.com/simplresty/ngx_devel_kit.git" }
        - { name: lua-nginx-module, url: "https://github.com/openresty/lua-nginx-module.git" }
        - { name: ngx_http_geoip2_module, url: "https://github.com/leev/ngx_http_geoip2_module.git" }
        - { name: headers-more-nginx-module, url: "https://github.com/openresty/headers-more-nginx-module.git" }
        - { name: nginx-vod-module, url: "https://github.com/kaltura/nginx-vod-module.git" }
    
    - name: Get Nginx source code
      unarchive: 
        src: http://nginx.org/download/nginx-{{ nginx_version }}.tar.gz
        dest: /usr/src/
        remote_src: yes

    - name: Compile Nginx with modules
      shell: "./configure --prefix=/usr/local/nginx --user=nginx --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --without-http_split_clients_module --without-http_uwsgi_module --without-http_scgi_module --with-http_ssl_module --with-http_stub_status_module --add-module=../nginx-rtmp-module/ --add-module=../ngx_cache_purge/ --with-http_realip_module --with-http_secure_link_module --with-http_dav_module --with-http_gzip_static_module --with-debug --with-file-aio --with-http_mp4_module --with-http_addition_module --with-http_v2_module --with-stream --with-stream_ssl_preread_module --with-http_perl_module --with-http_sub_module --with-http_slice_module --with-threads --with-ld-opt=-Wl,-rpath,/usr/local/openresty/luajit/lib --add-module=../ngx_devel_kit --add-module=../lua-nginx-module --add-module=../ngx_http_geoip2_module --add-module=../headers-more-nginx-module --with-http_image_filter_module --add-module=../nginx-vod-module && make && make install && chown -R nginx:nginx /usr/local/nginx && ln -s /usr/local/nginx/sbin/nginx /usr/sbin/nginx"
      args:
        chdir: /usr/src/nginx-{{ nginx_version }}/
        creates: /usr/local/nginx/sbin/nginx
      environment:
        LUAJIT_LIB: /usr/local/openresty/luajit/lib
        LUAJIT_INC: /usr/local/openresty/luajit/include/luajit-2.1

    - name: Create services' configuration
      template: 
        src: "templates/{{ item.src }}" 
        dest: "{{ item.dest }}" 
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}" 
        mode: "0644"
      with_items: 
        - { src: nginx.service.j2, dest: /usr/lib/systemd/system/nginx.service, owner: root }
        - { src: nginx.logrotate.j2, dest: /etc/logrotate.d/nginx, owner: root }
        - { src: nginx.conf.j2, dest: /usr/local/nginx/conf/nginx.conf, owner: nginx }
        - { src: collectd.conf.j2, dest: /etc/collectd.conf, owner: root }
        - { src: filebeat.yml.j2, dest: /etc/filebeat/filebeat.yml, owner: root }

    - name: Create cache/stream directories
      file:
        path: "{{ item }}"
        state: directory
        owner: nginx
        group: nginx
        mode: '0755'
      with_items: 
        - "/data/cache"
        - "/data/stream"
      when: transcoder == "no"

    - name: Start & enable nginx
      service: name=nginx state=restarted enabled=yes

    - name: Start & enable misc services
      service: name="{{ item }}" state=restarted enabled=yes
      with_items:
        - collectd
        - filebeat
      when: transcoder == "no"

    - name: Allow services/ports through firewalld
      firewalld: 
        zone: public
        port: "{{ item }}"
        permanent: yes
        immediate: yes
        state: enabled
      with_items:
        - 22999/tcp
        - 80/tcp
        - 443/tcp
        - 1935/tcp

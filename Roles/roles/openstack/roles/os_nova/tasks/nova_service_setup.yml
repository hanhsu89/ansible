---
- name: list users
  shell: "source /root/admin-openrc && openstack user list"
  register: ulist

- name: setup openstack service nova
  block:
    - name: Create user nova
      shell: "source /root/admin-openrc && openstack user create --domain default --password {{ nova_password }} nova"
    - name: Add role admin for user nova
      shell: "source /root/admin-openrc && openstack role add --project service --user nova admin"
    - name: Create the nova service entity
      shell: "source /root/admin-openrc && openstack service create --name nova --description 'OpenStack Compute' compute"
    - name: Create the Compute API service endpoints
      shell: "source /root/admin-openrc && openstack endpoint create --region RegionOne compute {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:8774/v2.1"
      with_items:
        - internal
        - public
        - admin
    - name: Create a Placement service user 
      shell: "source /root/admin-openrc && openstack user create --domain default --password {{ nova_placement_password }} placement"
    - name: Add the Placement user to the service project with the admin role
      shell: "source /root/admin-openrc && openstack role add --project service --user placement admin"
    - name: Create the Placement API entry in the service catalog
      shell: "source /root/admin-openrc && openstack service create --name placement --description 'Placement API' placement"
    - name: Create the Placement API service endpoints
      shell: "source /root/admin-openrc && openstack endpoint create --region RegionOne placement {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:8778"
      with_items:
        - internal
        - public
        - admin
  ignore_errors: True
  run_once: True
  when: ulist.stdout.find("nova") < 0 

- name: Discover compute hosts
  shell: "nova-manage cell_v2 discover_hosts --verbose"
  become: yes
  become_user: nova
  changed_when: false
  run_once: True
- name: Run nova-status upgrade check to validate a healthy configuration
  command: "nova-status upgrade check"
  become: yes
  become_user: "nova"
  register: nova_status_upgrade_check
  until: nova_status_upgrade_check is success
  retries: 3
  delay: 15
  # The nova-status upgrade check command has three standard return codes:
  # 0: all checks were successful
  # 1: warning: there might be some checks that require investigation, but
  #    generally will not block an automated install/upgrade; digging into
  #    warnings is useful for debugging post-install/upgrade issues
  # 2: at least one check failed and must stop the install/upgrade because
  #    something was not setup properly
  failed_when: "nova_status_upgrade_check.rc not in [0, 1]"
  changed_when: false
---

- name: Nginx | Create Group
  group:
    name: "{{ nginx_group }}"
    state: present

- name: Nginx | Create User
  user:
    name: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    shell: /sbin/nologin
    state: present

- name: Run APT update cache
  apt:
    update_cache: yes
    force_apt_get: yes

- name: Install required APT packages
  apt:
    name:
      - build-essential
      - apt-transport-https
      - libpcre3
      - libgd3
      - libpcre3-dev
      - zlib1g-dev
      - libssl-dev
      - libperl-dev
      - libgeoip-dev
      - geoip-bin
      - libgd-dev
      - libgeoip1
      - libxml2
      - libxml2-dev
      - libxslt1.1
      - libxslt1-dev
      - git
      - python-minimal
      - perl
      - tar
      - checkinstall
      - libtemplate-perl
      - python-apt
      - dirmngr
      - make
      - cmake
      - libjemalloc-dev 
      - uuid-dev 
      - libatomic1 
      - libatomic-ops-dev 
      - expat 
      - unzip 
      - autoconf 
      - automake 
      - libtool 
      - libgd-dev 
      - libmaxminddb-dev 
      - libxslt1-dev 
      - g++ 
      - curl
      - flex
      - bison
      - doxygen
      - libyajl-dev
      - dh-autoreconf
      - libcurl4-gnutls-dev
      - libpcre++-dev
    state: present
    update_cache: yes
    force_apt_get: yes

- name: Check nginx old version if exist
  command: "{{ nginx_binary_file }} -v"
  register: result
  ignore_errors: True

- name: Download nginx source file
  get_url:
    url: "http://nginx.org/download/nginx-{{ nginx_version }}.tar.gz"
    dest: "{{ nginx_src_dir }}/nginx-{{ nginx_version }}.tar.gz"
    timeout: 120
  when: (result is failed) or ('{{ nginx_version }}' not in result.stderr)

- name: Decompress nginx source file
  unarchive:
    src: "{{ nginx_src_dir }}/nginx-{{ nginx_version }}.tar.gz"
    dest: "{{ nginx_src_dir }}"
    copy: "no"

- name: Git clone Nginx Development Kit (NDK)
  git:
    repo: "{{ nginx_devel_kit_url }}"
    dest: "{{modules_build_dir}}/nginx_devel_kit/"
    clone: yes

- name: Git clone nginx VTS module for monitoring
  git:
    repo: "{{ nginx_vts_module_url }}"
    dest: "{{modules_build_dir}}/nginx_module_vts/"
    clone: yes

- name: Git clone nginx RTMP module for Streaming
  git:
    repo: "{{ nginx_rtmp_module_url }}"
    dest: "{{modules_build_dir}}/nginx_module_rtmp/"
    clone: yes

- name: Git clone nginx_http_geoip2_module
  git:
    repo: "{{ nginx_http_geoip2_module_url }}"
    dest: "{{modules_build_dir}}/nginx_http_geoip2_module/"
    clone: yes

- name: Git clone nginx_headers_more_module
  git:
    repo: "{{ nginx_headers_more_module_url }}"
    dest: "{{modules_build_dir}}/nginx_headers_more_module/"
    clone: yes
    
- name: Git clone nginx_vod_module
  git:
    repo: "{{ nginx_vod_module_url }}"
    dest: "{{modules_build_dir}}/nginx_vod_module/"
    clone: yes

- name: Git clone nginx_cache_purge_module
  git:
    repo: "{{ nginx_cache_purge_module_url }}"
    dest: "{{modules_build_dir}}/nginx_cache_purge_module/"
    clone: yes

#===== ModSecurity module

#=====

- name: Build NGINX from source with Modules
  command: chdir={{ nginx_src_dir }}/nginx-{{ nginx_version }} {{ item }}
  with_items:
  - ./configure {{ nginx_custom_modules }}
  - make -j 4
  - make install

- name: Remove default config nginx
  shell: "rm -rf {{ nginx_install_dir }}/conf/*.default"
  args:
    warn: false

- name: Create systemd service | RedHat
  template:
    src: nginx.service.j2
    dest: /usr/lib/systemd/system/nginx.service
    mode: 0755
  when: ansible_os_family == "RedHat" and ansible_service_mgr == "systemd"

- name: Create systemd service file | Debian
  template:
    src: nginx.service.j2
    dest: /etc/systemd/system/nginx.service
    mode: 0755
  when: ansible_os_family == "Debian" and ansible_service_mgr == "systemd"

- name: Reload systemd to reread configs
  systemd:
    daemon_reload: yes

- name: Start NGINX Service
  service:
    name: nginx
    state: restarted
    enabled: yes
    daemon_reload: true

- name: Config logrotate nginx
  template:
    src: nginx_logrotate.j2
    dest: /etc/logrotate.d/nginx
    mode: 0644

- name: Create nginx binany symlink
  file:
    src: "{{ nginx_binary_file }}"
    dest: /usr/bin/nginx
    state: link
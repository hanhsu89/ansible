---
- name: Install sudo on Centos
  yum:
    name: sudo
    state: latest
  when: ansible_os_family == 'RedHat'

- name: Install sudo on Ubuntu
  apt:
    name: sudo
    state: latest
    force_apt_get: yes
  when: ansible_os_family == 'Debian'

- name: Create sudo group
  group: 
    name: sudo 
    state: present

- name: Update accounts
  user:
    name: "{{ item.name }}"
    groups: "{{ item.groups }}"
    generate_ssh_key: yes
    append: yes
    state: present
    shell: /bin/bash
  with_items: "{{ users }}"
  when: item.servers and inventory_hostname in item.servers

- name: Allow sudo to execute in non TTY environments
  lineinfile: >
    dest=/etc/sudoers
    regexp="^Defaults    requiretty$"
    line="#Defaults    requiretty"

- name: Allow users to use sudo without a password
  lineinfile: >
    dest=/etc/sudoers
    regexp='%sudo ' 
    line='%sudo ALL=(ALL) NOPASSWD: ALL'
    state=present
    validate='visudo -cf %s'

- name: Disable old users ssh
  lineinfile: >
    dest=/etc/ssh/sshd_config
    state=absent
    regexp='^.*?Allowusers'

- name: Update new authorized_keys
  copy: >
    src=public_keys/{{ item.0.name }}.pub
    dest=/home/{{ item.0.name }}/.ssh/authorized_keys
    mode=600
  with_subelements:
    - "{{ users }}"
    - authorized_keys
  when: item.0.servers and inventory_hostname in item.0.servers and item.0.name!="deploy"

- name: Set owner file authorized_keys
  file:
    path=/home/{{ item.0.name }}/.ssh/authorized_keys
    owner={{ item.0.name }}
    group={{ item.0.name }}
  with_subelements:
    - "{{ users }}"
    - authorized_keys
  when: item.0.servers and inventory_hostname in item.0.servers and item.0.name!="deploy"

- name: Change color root user
  lineinfile: >
    dest=/root/.bashrc
    line='force_color_prompt=yes'
    line='PS1="\[\e[01;31m\]$PS1\[\e[00m\]"'
    state=present
  become: yes

- name: Remove sshd_config duplicated lines
  lineinfile: >
    dest=/etc/ssh/sshd_config
    state=absent
    regexp='^.*?{{ item }}'
  with_items:
    - "Port"
    - "ListenAddress"
    - "ChallengeResponseAuthentication"
    - "PasswordAuthentication"
    - "UsePAM"
    - "PubkeyAuthentication"
    - "PermitRootLogin"
    - "LogLevel"
    - "MaxAuthTries"
    - "PermitEmptyPasswords"
    - "X11Forwarding"
    - "AllowUsers"

- name: Disable password login and configure sshd
  lineinfile: >
    dest=/etc/ssh/sshd_config
    state=present
    line='{{ item }}'
  with_items:
    - "Port 22"
    - "UsePAM yes"
    - "PermitRootLogin no"
    - "PasswordAuthentication no"
    - "ChallengeResponseAuthentication no"
    - "PubkeyAuthentication yes"
    - "LogLevel INFO"
    - "MaxAuthTries 4"
    - "PermitEmptyPasswords no"
    - "X11Forwarding yes"

- name: Allow users ssh to server
  lineinfile: >
    dest=/etc/ssh/sshd_config
    line='AllowUsers {{ item.name }}'
    state=present
  with_items:
    - "{{ users }}"
  when: item.servers and inventory_hostname in item.servers

- name: Restart sshd | CentOS 6
  service: 
    name: sshd
    state: restarted
  ignore_errors: yes
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "6"

- name: restart sshd | CentOS 7
  systemd:
    state: restarted
    daemon_reload: yes
    name: sshd
  ignore_errors: yes
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: restart sshd | Ubuntu
  systemd:
    state: restarted
    daemon_reload: yes
    name: sshd
  ignore_errors: yes
  when: ansible_distribution == "Debian"

- name: Remove old accounts
  user: 
    name: '{{ item }}' 
    state: absent 
    remove: yes
  with_items: "{{ absent_users }}"
    - absent_users
  ignore_errors: yes